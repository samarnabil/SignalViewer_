# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'sv.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import matplotlib
import matplotlib.pyplot as plt
matplotlib.use('Qt5Agg')
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg, NavigationToolbar2QT as Navi
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib.figure import Figure
from scipy.fft import fft, ifft, fftshift
import numpy as np
# from scipy import signal
import matplotlib.backends.backend_pdf



#Canvas Class
class MatplotlibCanvas(FigureCanvasQTAgg):
	def __init__(self,parent=None, dpi = 120):
            fig = Figure(dpi = dpi)
            self.axes = fig.add_subplot(211)
            self.axes2 = fig.add_subplot(212)
            super(MatplotlibCanvas,self).__init__(fig)
            # fig.tight_layout()


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1014, 600)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("line-chart.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.gridLayout.addLayout(self.verticalLayout, 1, 0, 1, 1)
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("dragL.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_3.setIcon(icon1)
        self.pushButton_3.setObjectName("pushButton_3")
        self.gridLayout_2.addWidget(self.pushButton_3, 0, 3, 1, 1)
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("dragR.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_5.setIcon(icon2)
        self.pushButton_5.setObjectName("pushButton_5")
        self.gridLayout_2.addWidget(self.pushButton_5, 0, 4, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("zoom-in-button.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_2.setIcon(icon3)
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout_2.addWidget(self.pushButton_2, 0, 1, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(296, 56, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem1, 0, 9, 1, 1)
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("zoom-out.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_4.setIcon(icon4)
        self.pushButton_4.setObjectName("pushButton_4")
        self.gridLayout_2.addWidget(self.pushButton_4, 0, 2, 1, 1)
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("export.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_6.setIcon(icon5)
        self.pushButton_6.setObjectName("pushButton_6")
        self.gridLayout_2.addWidget(self.pushButton_6, 0, 5, 1, 1)
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("play.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_7.setIcon(icon6)
        self.pushButton_7.setObjectName("pushButton_7")
        self.gridLayout_2.addWidget(self.pushButton_7, 0, 6, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("open.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon7)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout_2.addWidget(self.pushButton, 0, 0, 1, 1)
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("stop.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_8.setIcon(icon8)
        self.pushButton_8.setObjectName("pushButton_8")
        self.gridLayout_2.addWidget(self.pushButton_8, 0, 7, 1, 1)
        self.gridLayout.addLayout(self.gridLayout_2, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1014, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        self.filename = ''
        self.canv = MatplotlibCanvas(self)
        self.df = []
        
        self.x = np.array([])
        self.y = np.array([])
        self.x1 = np.array([])
        self.y1 = np.array([])
        self.x2 = np.array([])
        self.y2 = np.array([])
        self.x3 = np.array([])
        self.y3 = np.array([])
        self.transition=0
        self.zoomFactor=0
        self.counter = 0
        self.start = 0
        self.end = 500
        
        self.mode = 'play'
        
        # Setup a timer to trigger the redraw by calling update_plot.
        self.timer = QtCore.QTimer()
        self.timer.setInterval(500)      #milliseconds
        self.timer.timeout.connect(self.update_plot)
        self.timer.start()
        
        self.pushButton.clicked.connect(self.getFile)
        self.pushButton_7.clicked.connect(self.changeMode)
        self.pushButton_8.clicked.connect(self.changeMode)
        self.pushButton_5.clicked.connect(self.scrollRight)
        self.pushButton_3.clicked.connect(self.scrollLeft)
        self.pushButton_2.clicked.connect(self.zoomIn)
        self.pushButton_4.clicked.connect(self.zoomOut)
        self.pushButton_6.clicked.connect(self.pdfGenerator)


    def getFile(self):
        """ This function will get the address of txt file location
        and calls the readData function"""
        self.filename = QFileDialog.getOpenFileName(filter = "txt (*.txt)")[0]
        print("File :", self.filename)
        self.mode ='new'
        self.readData()
        
        
    def readData(self):
        """ This function will read the data using pandas and call the update
        function to plot"""
        data = np.loadtxt(self.filename,dtype=str, skiprows=2)  
        print('loaded')
        self.transition+=1
        
        #empty the Numpy arrays
        if self.counter == 1:
            self.x = np.delete(self.x,[i for i in range(len(self.x))])
            self.y = np.delete(self.y ,[i for i in range(len(self.y))])

        
        for row in data:
            time,reading = row.split(",")
            time=float(time)
            reading=float(reading)
            self.x = np.insert(self.x, len(self.x), time)
            self.y = np.insert(self.y, len(self.y), reading)
        if self.transition == 1:
            self.x1 = np.insert(self.x1, len(self.x1), self.x)
            self.y1 = np.insert(self.y1, len(self.y1), self.y)
            print("Ayooo")
        elif self.transition == 2:
            self.x2 = np.insert(self.x2, len(self.x2), self.x)
            self.y2 = np.insert(self.y2, len(self.y2), self.y) 
        elif self.transition ==3:
            self.x3 = np.insert(self.x3, len(self.x3), self.x)
            self.y3 = np.insert(self.y3, len(self.y3), self.y)     

            
        print('ready')
        self.mode = 'play'
        self.viewData()
     
        
    def viewData(self):
        """ This function will plot the data"""
        

        if self.counter == 0:
            
            self.counter = 1
            
            #Draw Signal
            self.canv = MatplotlibCanvas(self)
            self.verticalLayout.addWidget(self.canv)
            
            
            self.canv.axes.plot(self.x[self.start:self.end], self.y[self.start:self.end])

            self.canv.axes.set_ylabel('Amplitude (mV)')
            #labels msh zahreen
            
            
            #Draw Spectrogram
            self.canv.axes2.set_xlabel('Time (seconds)')
            self.canv.axes.set_ylabel(' Frequency (Hz)')
            
            T = fft(self.x[self.start: self.end])
            self.canv.axes2.specgram(T)
            
            self.canv.show()
        else:
            #Draw Signal
            self.canv.axes.cla()  # Clear the canvas.
            self.canv.axes.set_ylabel('Amplitude (mV)')
            self.canv.axes.plot(self.x[self.start:self.end], self.y[self.start:self.end])
            
            #Draw Spectrogram
            self.canv.axes2.cla()  # Clear the canvas.
            self.canv.axes2.set_xlabel('Time (seconds)')
            self.canv.axes.set_ylabel(' Frequency (Hz)')
            
            T = fft(self.x[self.start: self.end])
            self.canv.axes2.specgram(T)
            
            self.canv.draw() 
            
            
        
        
    def update_plot(self):
        """ This function will implement the realtime effect"""

        if self.end == len(self.x) and self.mode == 'play':
            self.start = 0
            self.end = 500
            #draw
            self.canv.axes.cla()  # Clear the canvas.
            self.canv.axes.plot(self.x[self.start:self.end], self.y[self.start:self.end])
            print('redraw')
                
            self.canv.draw() 
            
        elif self.end != len(self.x)-1 and self.mode == 'play':
            self.start = self.end
            self.end += 500
            #draw
            self.canv.axes.cla()  # Clear the canvas.
            self.canv.axes.plot(self.x[self.start:self.end], self.y[self.start:self.end])
        
            self.canv.draw() 

            
            
    def scrollRight(self):
        print("RIGHTTTTTTTTTTTTTTTTTTTTTTTTTTT")
        self.start = self.end
        self.end += 500
        #draw
        self.canv.axes.cla()  # Clear the canvas.
        self.canv.axes.plot(self.x[self.start:self.end], self.y[self.start:self.end])
        self.canv.draw() 


    def scrollLeft(self):
        print("LEEEEEEEEEEEEEEFT")
        self.end = self.start
        self.start -= 500
        #draw
        self.canv.axes.cla()  # Clear the canvas.
        self.canv.axes.plot(self.x[self.start:self.end], self.y[self.start:self.end])
        self.canv.draw()    


    def zoomIn(self):
        
        self.zoomFactor+=.5
        self.start = 0
        self.end = 500
        #draw
        self.canv.axes.cla()  # Clear the canvas.
        self.canv.axes.plot(self.x[self.start:self.end], self.y[self.start:self.end])
        self.canv.axes.xaxis.zoom(self.zoomFactor)
        self.canv.axes.yaxis.zoom(self.zoomFactor)
    
        print('ZOOOOOOOOOOOOOOOOOOOOOOOOOOOOM in')
        print(self.zoomFactor)
            
        self.canv.draw()

    def zoomOut(self):
        
        self.zoomFactor-=.5
        self.start = 0
        self.end = 500
        #draw
        self.canv.axes.cla()  # Clear the canvas.
        self.canv.axes.plot(self.x[self.start:self.end], self.y[self.start:self.end])
        self.canv.axes.xaxis.zoom(self.zoomFactor)
        self.canv.axes.yaxis.zoom(self.zoomFactor)
    
        print('ZOOOOOOOOOOOOOOOOOOOOOOOOOOOOM out')
        print(self.zoomFactor)
            
        self.canv.draw()


    def signalDrawer(self,x,y,start,end):
        self.fig=plt.figure()
        self.fig, self.axs = plt.subplots(2)
        self.fig.suptitle('EEG Signal')
        self.axs[0].plot(x[start:end],y[start:end])
        self.axs[0].set(ylabel= "Amplitude (mVolts)")
        self.T = fft(x[start:end])
        self.axs[1].specgram(self.T)
        self.axs[1].set(xlabel= 'Time (seconds)')
        self.axs[1].set(ylabel= 'Frequency (Hz)')
        self.axs[1].set(ylabel= 'Frequency (Hz)')
        plt.show()
        return self.fig
    
    def pdfGenerator(self):
        pdf = matplotlib.backends.backend_pdf.PdfPages("Output.pdf")

        if self.transition == 1:
            graph1=self.signalDrawer(self.x1,self.y1,self.start,self.end)
            pdf.savefig(graph1)
            print("Transition 1")
        elif self.transition == 2:
            graph1=self.signalDrawer(self.x1,self.y1,self.start,self.end)
            graph2=self.signalDrawer(self.x2,self.y2,self.start,self.end)
            pdf.savefig(graph1)
            pdf.savefig(graph2)

            print("Transition 2")

        elif self.transition ==3:
            graph1=self.signalDrawer(self.x1,self.y1,self.start,self.end)
            graph2=self.signalDrawer(self.x2,self.y2,self.start,self.end)
            graph3=self.signalDrawer(self.x3,self.y3,self.start,self.end)
            pdf.savefig(graph1)
            pdf.savefig(graph2)
            pdf.savefig(graph3)
            print(self.x1)
            print(self.x2)
            print(self.x3)
            print("Transition 3")
        

        pdf.close()
        
        # self.graph.savefig("Output.pdf")
        print("PDFFDFDFDFDFDF")


    def changeMode(self):
        """ This function checks current mode and change it if triggered"""
        
        if self.mode == 'play':
            self.mode = 'stop'
            self.update_plot()
        elif self.mode == 'stop':
            self.mode = 'play'
            self.update_plot()
        
        
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Signal Viewer"))
        self.pushButton_3.setText(_translate("MainWindow", "Scroll Left"))
        self.pushButton_3.setShortcut(_translate("MainWindow", "Ctrl+L"))
        self.pushButton_5.setText(_translate("MainWindow", "Scroll Right"))
        self.pushButton_5.setShortcut(_translate("MainWindow", "Ctrl+R"))
        self.pushButton_2.setText(_translate("MainWindow", "Zoom In"))
        self.pushButton_2.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.pushButton_4.setText(_translate("MainWindow", "Zoom Out"))
        self.pushButton_4.setShortcut(_translate("MainWindow", "Ctrl+U"))
        self.pushButton_6.setText(_translate("MainWindow", "Export"))
        self.pushButton_6.setShortcut(_translate("MainWindow", "Ctrl+E"))
        self.pushButton_7.setText(_translate("MainWindow", "Play"))
        self.pushButton_7.setShortcut(_translate("MainWindow", "Ctrl+P"))
        self.pushButton.setText(_translate("MainWindow", "Open"))
        self.pushButton.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.pushButton_8.setText(_translate("MainWindow", "Stop"))
        self.pushButton_8.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuView.setTitle(_translate("MainWindow", "View"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))


        

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
